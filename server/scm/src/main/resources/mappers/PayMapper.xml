<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.scm.order.mapper.PayMapper">

  <!-- ============================================================= -->
  <!-- 1. 결제 등록 (payment 테이블) -->
  <!-- ============================================================= -->
  <insert id="insertPayment" parameterType="PaymentVO">
    <selectKey keyProperty="payId" resultType="string" order="BEFORE">
      SELECT 'PM' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
             LPAD(NVL(MAX(SUBSTR(pay_id, 12, 3)), 0) + 1, 3, '0')
      FROM payment
      WHERE pay_id LIKE 'PM' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
    </selectKey>

    INSERT INTO payment (
      pay_id,
      pay_rmk,
      pay_amount,
      vendor_id,
      pay_date,
      pay_type
    ) VALUES (
      #{payId},
      #{payRmk},
      #{payAmount},
      #{vendorId},
      SYSDATE,
      #{payType}
    )
  </insert>

  <!-- ============================================================= -->
  <!-- 2. 결제 상세 등록 (payment_detail 테이블) -->
  <!-- 주문건은 total_price, 반품건은 return_price에 각각 저장 -->
  <!-- ============================================================= -->
  <insert id="insertPaymentDetail" parameterType="PaymentDetailVO">
    <selectKey keyProperty="payDetailId" resultType="string" order="BEFORE">
      SELECT 'PD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
             LPAD(NVL(MAX(SUBSTR(pay_detail_id, 12, 3)), 0) + 1, 3, '0')
      FROM payment_detail
      WHERE pay_detail_id LIKE 'PD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
    </selectKey>

    INSERT INTO payment_detail (
      pay_detail_id,
      pay_id,
      order_id,
      total_price,
      return_price
    ) VALUES (
      #{payDetailId},
      #{payId},
      #{orderId},
      #{totalPrice},
      #{returnPrice}
    )
  </insert>

  <!-- ============================================================= -->
  <!-- 3. 결제 대기중인 주문건 조회 (반품금액 포함) -->
  <!-- ============================================================= -->
  <select id="selectPendingOrders" resultType="SalesOrderVO">
    SELECT 
        so.order_id AS orderId,
        so.order_date AS orderDate,
        so.send_date AS sendDate,
        ROUND(so.total_price, 2) AS totalPrice,
        ROUND(NVL(so.return_price, 0), 2) AS returnPrice,   
        ROUND(so.total_price - NVL(so.return_price, 0), 2) AS finalAmount,
        so.pay_status AS payStatus,
        so.status AS status,
        so.paydue_date AS paydueDate,
        CASE 
            WHEN COUNT(sod.prod_name) > 1 
                THEN MAX(sod.prod_name) || ' 외 ' || (COUNT(sod.prod_name) - 1) || '건'
            ELSE MAX(sod.prod_name)
        END AS prodName
    FROM sales_order so
    JOIN sales_order_detail sod ON so.order_id = sod.order_id
    WHERE so.pay_status <![CDATA[<>]]> '결제완료'
      AND so.order_date BETWEEN TRUNC(ADD_MONTHS(SYSDATE, -1)) AND SYSDATE
    GROUP BY 
        so.order_id, so.order_date, so.send_date, so.total_price,
        so.return_price, so.pay_status, so.status, so.paydue_date
    ORDER BY so.order_date DESC
  </select>

  <!-- ============================================================= -->
  <!-- 4. 결제 목록 조회 -->
  <!-- ============================================================= -->
  <select id="selectPaymentList" resultType="map">
    SELECT
      p.pay_id AS paymentNo,                         
      TO_CHAR(p.pay_date, 'YYYY-MM-DD') AS payDate,   

      
      (
        NVL((SELECT SUM(so.total_price)
             FROM sales_order so
             WHERE so.pay_status = '대기'), 0)
        -
        NVL((SELECT SUM(r.return_price)
             FROM return r
             WHERE r.return_status = '승인'), 0)
      ) AS outstandingAmount,

     
      SUM(
        CASE
          WHEN pd.return_price > 0 THEN -pd.return_price
          ELSE pd.total_price
        END
      ) AS payAmount,

     
      (
        NVL((SELECT SUM(so.total_price)
             FROM sales_order so
             WHERE so.pay_status = '대기'), 0)
        -
        NVL((SELECT SUM(r.return_price)
             FROM return r
             WHERE r.return_status = '승인'), 0)
        -
        SUM(
          CASE
            WHEN pd.return_price > 0 THEN -pd.return_price
            ELSE pd.total_price
          END
        )
      ) AS finalBalance,

      
      (10000000 -
        (
          NVL((SELECT SUM(so.total_price)
               FROM sales_order so
               WHERE so.pay_status = '대기'), 0)
          -
          NVL((SELECT SUM(r.return_price)
               FROM return r
               WHERE r.return_status = '승인'), 0)
          -
          SUM(
            CASE
              WHEN pd.return_price > 0 THEN -pd.return_price
              ELSE pd.total_price
            END
          )
        )
      ) AS creditBalance,

      p.pay_rmk AS payRmk                              
    FROM payment p
    JOIN payment_detail pd ON p.pay_id = pd.pay_id
    GROUP BY p.pay_id, p.pay_date, p.pay_rmk
    ORDER BY p.pay_date DESC
  </select>

  <!-- ============================================================= -->
  <!-- 5. 결제 상세 조회 -->
  <!-- ============================================================= -->
  <select id="selectPaymentDetail" parameterType="string" resultType="PaymentDetailVO">
    SELECT
      pd.pay_detail_id,
      pd.pay_id,
      pd.order_id,
      pd.total_price,
      pd.return_price,
      so.total_price AS orderTotalPrice,
      TO_CHAR(so.order_date, 'YYYY-MM-DD') AS orderDate,
      v.vendor_name
    FROM payment_detail pd
    JOIN sales_order so ON pd.order_id = so.order_id
    JOIN vendor v ON so.vendor_id = v.vendor_id
    WHERE pd.pay_id = #{payId}
    ORDER BY pd.order_id
  </select>

  <!-- ============================================================= -->
  <!-- 6. 납부 취소 시 삭제 -->
  <!-- ============================================================= -->
  <delete id="deletePayment" parameterType="string">
    DELETE FROM payment WHERE pay_id = #{payId}
  </delete>

  <delete id="deletePaymentDetail" parameterType="string">
    DELETE FROM payment_detail WHERE pay_id = #{payId}
  </delete>

  <!-- ============================================================= -->
  <!-- 7. 결제시 주문건 상태 완료 처리 -->
  <!-- ============================================================= -->
  <update id="updateOrderStatusToComplete">
    UPDATE sales_order
    SET pay_status = '완료'
    WHERE order_id IN
    <foreach collection="orderIdList" item="id" open="(" separator="," close=")">
        #{id}
    </foreach>
  </update>

  <!-- ============================================================= -->
  <!-- 8. 결제시 반품건 상태 완료 처리 -->
  <!-- ============================================================= -->
  <update id="updateReturnStatusToComplete">
    UPDATE RETURN
    SET return_status = '완료'
    WHERE return_id IN
    <foreach collection="returnIdList" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </update>

  <!-- ============================================================= -->
  <!-- 9. 납부등록페이지 - 거래요약 카드 -->
  <!-- ============================================================= -->
  <select id="getSummaryReport" resultType="map">
    SELECT
    
      COALESCE(SUM(
        CASE 
          WHEN p.pay_date BETWEEN 
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1)
              ELSE TRUNC(SYSDATE, 'MONTH')
            END
          AND
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN TRUNC(SYSDATE, 'MONTH') - (1/86400)
              ELSE LAST_DAY(TRUNC(SYSDATE, 'MONTH'))
            END
          THEN p.pay_amount
        END
      ), 0) AS completedAmount,

      
      (
        SELECT COUNT(*)
        FROM sales_order so
        WHERE so.pay_status = '완료'
          AND so.order_date BETWEEN
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1)
              ELSE TRUNC(SYSDATE, 'MONTH')
            END
          AND
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN TRUNC(SYSDATE, 'MONTH') - (1/86400)
              ELSE LAST_DAY(TRUNC(SYSDATE, 'MONTH'))
            END
      ) AS completedCount,

     
      (
        SELECT COUNT(*)
        FROM sales_order so
        WHERE so.pay_status = '대기'
          AND so.order_date BETWEEN
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1)
              ELSE TRUNC(SYSDATE, 'MONTH')
            END
          AND
            CASE 
              WHEN SYSDATE &lt; TRUNC(SYSDATE, 'MONTH') + 14 + 0.5 
                   THEN TRUNC(SYSDATE, 'MONTH') - (1/86400)
              ELSE LAST_DAY(TRUNC(SYSDATE, 'MONTH'))
            END
      ) AS pendingCount
    FROM payment p
  </select>

  <!-- ============================================================= -->
  <!-- 10. 납부내역 조회 -->
  <!-- ============================================================= -->
  <select id="selectPaymentSummaryList" resultType="PaymentVO">
    SELECT 
      p.pay_id     AS payId,
      p.vendor_id  AS vendorId,
      p.pay_date   AS payDate,
      p.pay_amount AS payAmount,
      p.pay_type   AS payType,
      p.pay_rmk    AS payRmk
    FROM payment p
    ORDER BY p.pay_date DESC
  </select>

</mapper>
