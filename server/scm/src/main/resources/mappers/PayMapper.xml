<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.scm.order.mapper.PayMapper">

  <!-- ==================================== -->
  <!-- 1. 결제 등록 (payment 테이블) -->
  <!-- ==================================== -->
  <insert id="insertPayment" parameterType="PaymentVO">
  <selectKey keyProperty="payId" resultType="string" order="BEFORE">
    SELECT 'PM' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
           LPAD(NVL(MAX(SUBSTR(pay_id, 12, 3)), 0) + 1, 3, '0')
    FROM payment
    WHERE pay_id LIKE 'PM' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
  </selectKey>
  
  INSERT INTO payment (
    pay_id,
    pay_rmk,
    pay_amount,
    vendor_id,
    pay_date,
    pay_type
  ) VALUES (
    #{payId},
    #{payRmk},
    #{payAmount},
    #{vendorId},
    SYSDATE,
    #{payType}
  )
  </insert>


 <!-- ==================================== -->
<!-- 2. 결제 상세 등록 (payment_detail 테이블) -->
<!-- 주문건은 total_price, 반품건은 return_price에 각각 저장 -->
<!-- ==================================== -->
<insert id="insertPaymentDetail" parameterType="PaymentDetailVO">
  <selectKey keyProperty="payDetailId" resultType="string" order="BEFORE">
    SELECT 'PD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
           LPAD(NVL(MAX(SUBSTR(pay_detail_id, 12, 3)), 0) + 1, 3, '0')
    FROM payment_detail
    WHERE pay_detail_id LIKE 'PD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
  </selectKey>

  INSERT INTO payment_detail (
    pay_detail_id,
    pay_id,
    order_id,
    total_price,
    return_price
  ) VALUES (
    #{payDetailId},
    #{payId},
    #{orderId},
    #{totalPrice},
    #{returnPrice}
  )
</insert>


  <!-- ==================================== -->
  <!-- 3. 결제 대기 상태 + 반품 대기 상태 조회 -->
  <!-- COMPLETE(완료) 상태 제외 -->
  <!-- ==================================== -->
<select id="selectPendingOrders" resultType="SalesOrderVO">

    
SELECT *
FROM (
  
    SELECT 
        so.order_id AS orderId,
        so.order_date AS orderDate,
        so.send_date AS sendDate,
        CAST(so.total_price AS NUMBER(12,2)) AS totalPrice,
        so.pay_status AS payStatus,
        'ORDER' AS dataType,
        CASE 
            WHEN COUNT(p.prod_name) > 1 THEN 
                MAX(p.prod_name) || ' 외 ' || (COUNT(p.prod_name)-1) || '건'
            ELSE 
                MAX(p.prod_name)
        END AS prodName
    FROM SALES_ORDER so
    JOIN SALES_ORDER_DETAIL sod ON so.order_id = sod.order_id
    JOIN PRODUCT p ON sod.prod_id = p.prod_id
    WHERE so.pay_status = '대기'
    GROUP BY so.order_id, so.order_date, so.send_date, so.total_price, so.pay_status

    UNION ALL

   
    SELECT
        r.return_id AS orderId,
        r.return_date AS orderDate,
        NULL AS sendDate,
        -NVL(r.return_price, 0) AS totalPrice,
        r.return_status AS payStatus,
        'RETURN' AS dataType,
        MAX(p.prod_name) AS prodName
    FROM "RETURN" r
    JOIN SALES_ORDER_DETAIL sod ON r.odetail_id = sod.odetail_id
    JOIN PRODUCT p ON sod.prod_id = p.prod_id
    WHERE TRIM(r.return_status) = '대기'
    GROUP BY r.return_id, r.return_date, r.return_price, r.return_status
) result
ORDER BY result.orderDate DESC



</select>






  <!-- ==================================== -->
  <!-- 4. 결제 목록 조회 -->
  <!-- ==================================== -->
  <select id="selectPaymentList" resultType="map">
 SELECT
    p.pay_id,
    TO_CHAR(p.pay_date, 'YYYY-MM-DD') AS pay_date,

    -- 미수금 = 전체 주문금액 - 전체 반품금액
    NVL((SELECT SUM(total_price) FROM sales_order WHERE pay_status = '대기'), 0)
    - NVL((SELECT SUM(return_price) FROM return WHERE return_status = '대기'), 0) AS outstanding_amount,

    -- 납부금액 (반품은 음수, 주문은 양수)
    SUM(
        CASE
            WHEN pd.return_price > 0 THEN -pd.return_price
            ELSE pd.total_price
        END
    ) AS pay_amount,

    -- 최종잔액 = 미수금 - 납부금액
    (
        NVL((SELECT SUM(total_price) FROM sales_order WHERE pay_status = '대기'), 0)
        - NVL((SELECT SUM(return_price) FROM return WHERE return_status = '대기'), 0)
        - SUM(
            CASE
                WHEN pd.return_price > 0 THEN -pd.return_price
                ELSE pd.total_price
            END
        )
    ) AS final_balance,

    -- 여신잔액 = 10,000,000 - (미수금 - 납부금액)
    (10000000 - (
        NVL((SELECT SUM(total_price) FROM sales_order WHERE pay_status = '대기'), 0)
        - NVL((SELECT SUM(return_price) FROM return WHERE return_status = '대기'), 0)
        - SUM(
            CASE
                WHEN pd.return_price > 0 THEN -pd.return_price
                ELSE pd.total_price
            END
        )
    )) AS credit_balance,

    p.pay_rmk
FROM payment p
JOIN payment_detail pd ON p.pay_id = pd.pay_id
GROUP BY p.pay_id, p.pay_date, p.pay_rmk
ORDER BY p.pay_date DESC

  </select>

  <!-- ==================================== -->
  <!-- 5. 결제 상세 조회 -->
  <!-- ==================================== -->
  <select id="selectPaymentDetail" parameterType="string" resultType="PaymentDetailVO">
    SELECT
      pd.pay_detail_id,
      pd.pay_id,
      pd.order_id,
      pd.total_price,
      pd.return_price,
      so.total_price AS order_total_price,
      TO_CHAR(so.order_date, 'YYYY-MM-DD') AS order_date,
      v.vendor_name
    FROM payment_detail pd
    JOIN sales_order so ON pd.order_id = so.order_id
    JOIN vendor v ON so.vendor_id = v.vendor_id
    WHERE pd.pay_id = #{payId}
    ORDER BY pd.order_id
  </select>

  <!-- ==================================== -->
  <!-- 6. 납부 취소 시 삭제 -->
  <!-- ==================================== -->
  <delete id="deletePayment" parameterType="string">
    DELETE FROM payment
    WHERE pay_id = #{payId}
  </delete>

  <delete id="deletePaymentDetail" parameterType="string">
    DELETE FROM payment_detail
    WHERE pay_id = #{payId}
  </delete>

  <!-- ==================================== -->
  <!-- 7. 주문/반품 상태 COMPLETE 업데이트 -->
  <!-- ==================================== -->
  <update id="updateOrderStatusToComplete">
    UPDATE sales_order
    SET pay_status = '완료'
    WHERE order_id IN
    <foreach collection="orderId" item="id" open="(" separator="," close=")">
        #{id}
    </foreach>
  </update>

<!-- ==================================== -->
<!-- 8. 반품 상태 COMPLETE 업데이트 (단일) -->
<!-- ==================================== -->
<update id="updateReturnStatusToComplete">
  UPDATE RETURN
  SET return_status = '완료'
  WHERE return_id IN
  <foreach collection="list" item="id" open="(" separator="," close=")">
    #{id}
  </foreach>
</update>




</mapper>
