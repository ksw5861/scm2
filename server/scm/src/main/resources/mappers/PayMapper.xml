<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.scm.order.mapper.PayMapper">

  <!-- ==================================== -->
  <!-- 1. 결제 등록 (payment 테이블) -->
  <!-- ==================================== -->
  <insert id="insertPayment" parameterType="PaymentVO">
    INSERT INTO payment (
      pay_id,
      pay_rmk,
      pay_amount,
      vendor_id,
      pay_date,
      pay_type
    ) VALUES (
      next_date_code('PM'),
      #{payRmk},
      #{payAmount},
      #{vendorId},
      SYSDATE,
      #{payType}
    )
  </insert>


  <!-- 결제 대기 상태인 주문만 조회 -->
  <select id="selectPendingPaymentOrders" resultType="SalesOrderVO">
    SELECT
        so.order_id,
        so.order_date,
        so.send_date,
        so.total_price,
        so.paydue_date,
        so.pay_status,
        p.prod_name
    FROM sales_order so
    JOIN sales_order_detail sod ON so.order_id = sod.order_id
    JOIN product p ON sod.prod_id = p.prod_id
    WHERE so.pay_status = '대기'
    ORDER BY so.order_date DESC
</select>


  <!-- ==================================== -->
  <!-- 2. 결제 상세 등록 (payment_detail 테이블) -->
  <!-- ==================================== -->
  <insert id="insertPaymentDetail" parameterType="PaymentDetailVO">
    INSERT INTO payment_detail (
      pay_detail_id,
      pay_id,
      order_id,
      total_price
    ) VALUES (
      #{payDetailId},
      #{payId},
      #{orderId},
      #{totalPrice}
    )
  </insert>

  <!-- ==================================== -->
  <!-- 3. 결제 목록 조회 -->
  <!-- ==================================== -->
 <select id="selectPaymentList" resultType="map">
    WITH SALES_DATA AS (
        SELECT TO_CHAR(ORDER_DATE, 'YYYY-MM') AS MONTH_KEY,  -- 년-월 단위 그룹핑
               SUM(TOTAL_PRICE) AS TOTAL_SALES               -- 총매출
        FROM SALES_ORDER
        GROUP BY TO_CHAR(ORDER_DATE, 'YYYY-MM')
    ),
    RETURN_DATA AS (
        SELECT TO_CHAR(RETURN_DATE, 'YYYY-MM') AS MONTH_KEY, -- 년-월 단위 그룹핑
               SUM(RETURN_PRICE) AS TOTAL_RETURNS            -- 총반품금액
        FROM RETURN
        GROUP BY TO_CHAR(RETURN_DATE, 'YYYY-MM')
    ),
    PAYMENT_DATA AS (
        SELECT PAY_ID,
               PAY_DATE,
               PAY_RMK,
               VENDOR_ID,
               SUM(PAY_AMOUNT) AS PAY_AMOUNT
        FROM PAYMENT
        GROUP BY PAY_ID, PAY_DATE, PAY_RMK, VENDOR_ID
    )
    SELECT
        PD.PAY_ID,
        TO_CHAR(PD.PAY_DATE, 'YYYY-MM-DD') AS PAY_DATE,  -- 결제일자 (년-월-일)
        
        -- 미수금 = 총매출 - 총반품
        NVL(SD.TOTAL_SALES, 0) - NVL(RD.TOTAL_RETURNS, 0) AS OUTSTANDING_AMOUNT,
        
        -- 납부금액 = 결제 테이블의 납부금액
        NVL(PD.PAY_AMOUNT, 0) AS PAY_AMOUNT,
        
        -- 최종잔액 = (총매출 - 총반품) - 납부금
        (NVL(SD.TOTAL_SALES, 0) - NVL(RD.TOTAL_RETURNS, 0)) - NVL(PD.PAY_AMOUNT, 0) AS FINAL_BALANCE,
        
        -- 여신잔액 = 여신한도 - (총매출 - 총반품)
        (10000000 - (NVL(SD.TOTAL_SALES, 0) - NVL(RD.TOTAL_RETURNS, 0))) AS CREDIT_BALANCE,
        
        PD.PAY_RMK
    FROM PAYMENT_DATA PD
    LEFT JOIN SALES_DATA SD ON TO_CHAR(PD.PAY_DATE, 'YYYY-MM') = SD.MONTH_KEY
    LEFT JOIN RETURN_DATA RD ON TO_CHAR(PD.PAY_DATE, 'YYYY-MM') = RD.MONTH_KEY
    ORDER BY PD.PAY_DATE DESC
</select>


  <!-- ==================================== -->
  <!-- 4. 결제 상세 조회 -->
  <!-- ==================================== -->
  <select id="selectPaymentDetail" parameterType="string" resultType="PaymentDetailVO">
    SELECT
      pd.pay_detail_id,
      pd.pay_id,
      pd.order_id,
      pd.total_price,
      so.total_price,
      TO_CHAR(so.order_date, 'YYYY-MM-DD') AS order_date,
      v.vendor_name
    FROM payment_detail pd
    JOIN sales_order so ON pd.order_id = so.order_id
    JOIN vendor v ON so.vendor_id = v.vendor_id
    WHERE pd.pay_id = #{payId}
    ORDER BY pd.order_id
  </select>

  <!-- ==================================== -->
  <!-- 5. 결제 내역 삭제 (취소) -->
  <!-- ==================================== -->
  <delete id="deletePayment" parameterType="string">
    DELETE FROM payment
    WHERE pay_id = #{payId}
  </delete>

  <delete id="deletePaymentDetail" parameterType="string">
    DELETE FROM payment_detail
    WHERE pay_id = #{payId}
  </delete>

</mapper>
