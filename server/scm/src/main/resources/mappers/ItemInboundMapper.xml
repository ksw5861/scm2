<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.scm.product.mapper.InboundMapper">

  <!-- ===================== LOT 목록 조회 ===================== -->
  <select id="selectInboundLots" resultType="com.yedam.scm.vo.ProductLotVO">
    SELECT pl.prod_no,
           pl.prod_id,
           pl.pro_qty,
           pl.mat_status,
           pl.pro_date + p.exp end_date,
           pl.pro_date,
           p.prod_name,
           p.spec,
           p.unit
      FROM product_plan_detail pl
      JOIN product p ON p.prod_id = pl.prod_id
     WHERE mat_status = '입고대기'
       <if test="prodId != null and prodId != ''">
         AND pl.prod_id = #{prodId}
       </if>
       <if test="prodName != null and prodName != ''">
         AND p.prod_name LIKE '%' || #{prodName} || '%'
       </if>
       <if test="endDate != null">
         AND TRUNC(pl.pro_date) = TRUNC(#{endDate})
       </if>
       <if test="prodNo != null and prodNo != ''">
         AND pl.prod_no = #{prodNo}
       </if>
     ORDER BY pl.prod_No DESC
  </select>

  <update id="updateInbound" parameterType="com.yedam.scm.vo.ProductLotVO">
    UPDATE Product_LOT
       SET total_qty     = #{totalQty},
           remain_qty    = NVL(remain_qty,0) + #{totalQty},
           transfer_date = NVL(#{transferDate}, SYSDATE),
           status        = 'Y'
     WHERE prd_lot = #{prdLot}
  </update>

  <!-- 프로시저 호출 -->
  <select id="callInsertInbound" parameterType="map" statementType="CALLABLE">
    { call INSERT_INBOUND(
        #{prodNo,     mode=IN, jdbcType=VARCHAR},
        #{whId,       mode=IN, jdbcType=VARCHAR},
        #{totalQty,   mode=IN, jdbcType=NUMERIC},
        #{employeeId, mode=IN, jdbcType=VARCHAR},
        #{rowCount,   mode=OUT, jdbcType=NUMERIC, javaType=java.lang.Integer}
      ) }
  </select>


  <!-- ===================== 모달 ===================== -->
  <select id="selectInboundProductListByCondition" resultType="ProductVO">
    SELECT *
      FROM (
        SELECT p.prod_id,
               p.prod_name,
               ROW_NUMBER() OVER (ORDER BY p.prod_id DESC) AS rn
          FROM product p
         WHERE 1=1
           <if test="condition != null and condition != ''">
             AND (p.prod_id LIKE '%' || #{condition} || '%'
                  OR p.prod_name LIKE '%' || #{condition} || '%')
           </if>
      )
     WHERE rn BETWEEN #{paging.startRow} AND #{paging.endRow}
  </select>

  <select id="selectInboundProductCountByCondition" resultType="long">
    SELECT COUNT(*)
      FROM product p
     WHERE 1=1
       <if test="condition != null and condition != ''">
         AND (p.prod_id LIKE '%' || #{condition} || '%'
              OR p.prod_name LIKE '%' || #{condition} || '%')
       </if>
    </select>

  <select id="selectDashboardSummary" resultType="SalesOrderVO">
  SELECT
      NVL(SUM(s.total_price), 0) AS totalPrice,
      NVL(SUM(s.return_price), 0) AS returnPrice,
      NVL(SUM(p.pay_amount), 0) AS totalPayment,
      NVL(SUM(s.total_price), 0)
        - NVL(SUM(s.return_price), 0)
        - NVL(SUM(p.pay_amount), 0) AS totalAr
  FROM sales_order s
  LEFT JOIN (
      SELECT vendor_id, SUM(pay_amount) AS pay_amount
      FROM payment
      GROUP BY vendor_id
  ) p ON s.vendor_id = p.vendor_id
</select>




  <!-- 창고 모달 -->
  <select id="selectWarehouseListByCondition" resultType="WareHouseVO">
    SELECT *
      FROM (
        SELECT w.wh_id   AS whId,
               w.wh_name AS whName,
               ROW_NUMBER() OVER (ORDER BY w.wh_id DESC) AS rn
          FROM warehouse w
         WHERE 1=1
           <if test="condition != null and condition != ''">
             AND (w.wh_id LIKE '%' || #{condition} || '%'
                  OR w.wh_name LIKE '%' || #{condition} || '%')
           </if>
      )
     WHERE rn BETWEEN #{paging.startRow} AND #{paging.endRow}
  </select>

  <select id="selectWarehouseCountByCondition" resultType="long">
    SELECT COUNT(*)
      FROM warehouse w
     WHERE 1=1
       <if test="condition != null and condition != ''">
         AND (w.wh_id LIKE '%' || #{condition} || '%'
              OR w.wh_name LIKE '%' || #{condition} || '%')
       </if>
  </select>


  <!-- ===================== 주문승인 ===================== -->
  <select id="selectApprovalOrders" resultType="com.yedam.scm.vo.SalesOrderVO">
    SELECT so.order_id,
           so.order_date,
           v.company_name,
           so.status prod_status
      FROM sales_order so
      LEFT JOIN vendor v ON so.vendor_id = v.vendor_id
     WHERE so.status in ('대기', '처리중')
     ORDER BY so.order_date DESC
  </select>

  <resultMap id="SalesOrderDetailMap" type="com.yedam.scm.vo.SalesOrderDetailVO">
    <id     column="odetail_id"      property="odetailId"/>
    <result column="order_id"        property="orderId"/>
    <result column="prod_id"         property="prodId"/>
    <result column="prod_name"       property="prodName"/>
    <result column="spec"            property="spec"/>
    <result column="unit"            property="unit"/>
    <result column="order_qty"       property="orderQty"/>
    <result column="prod_unit_price" property="prodUnitPrice"/>
    <result column="prod_status"     property="prodStatus"/>
  </resultMap>

  <select id="selectApprovalDetails" resultMap="SalesOrderDetailMap">
    SELECT sod.odetail_id,
           sod.order_id,
           sod.prod_id,
           p.prod_name,
           p.spec,
           p.unit,
           sod.order_qty,
           sod.prod_unit_price,
           sod.prod_status
      FROM sales_order_detail sod
      LEFT JOIN product p ON p.prod_id = sod.prod_id
     WHERE sod.order_id = #{orderId}
     ORDER BY sod.odetail_id
  </select>

  <update id="approveDetails">
    UPDATE sales_order_detail
       SET prod_status = '승인'
     WHERE odetail_id IN
     <foreach collection="odetailIds" item="id" open="(" separator="," close=")">
       #{id}
     </foreach>
  </update>

  <update id="rejectDetails">
    UPDATE sales_order_detail
       SET prod_status = '반려',
       ORDER_QTY = 0

     WHERE odetail_id IN
     <foreach collection="odetailIds" item="id" open="(" separator="," close=")">
       #{id}
     </foreach>
  </update>

  
<!-- 주문승인 프로시저 호출 -->
<select id="callProcApproveOrder" parameterType="map" statementType="CALLABLE">
  { call PROC_APPROVE_ORDER(
      #{orderDetailIds, mode=IN, jdbcType=VARCHAR},
      #{status, mode=IN, jdbcType=VARCHAR},
      #{rowCount, mode=OUT, jdbcType=NUMERIC, javaType=java.lang.Integer}
  ) }
</select>


  <!-- ===================== 반품승인 ===================== -->
  <select id="selectReturnList" resultType="com.yedam.scm.vo.ReturnVO">
    SELECT r.return_id,
           r.return_date,
           v.company_name,
           r.return_status
      FROM return r
      LEFT JOIN vendor v ON r.vendor_id = v.vendor_id
     WHERE r.return_status IN ('대기','처리중')
     ORDER BY r.return_date DESC
  </select>

  <select id="selectReturnDetails" resultType="ReturnDetailVO">
    SELECT d.rdetail_id       AS rdetailId,
           d.return_id        AS returnId,
           d.prod_id          AS prodId,
           p.prod_name        AS prodName,
           d.return_qty       AS returnQty,
           d.prod_unit_price  AS prodUnitPrice,
           (d.return_qty * d.prod_unit_price) AS amt,
           d.return_why       AS returnWhy,
           d.rdetail_status   AS rdetailStatus,
           v.company_name     AS companyName
      FROM return_detail d
      JOIN product p ON d.prod_id = p.prod_id
      LEFT JOIN return r ON d.return_id = r.return_id
      LEFT JOIN vendor v ON r.vendor_id = v.vendor_id
     WHERE d.return_id = #{returnId}
  </select>

  <update id="approveReturnDetails">
    UPDATE return_detail
       SET rdetail_status = '승인'
     WHERE rdetail_id IN
     <foreach collection="ids" item="id" open="(" separator="," close=")">
       #{id}
     </foreach>
  </update>

  <update id="rejectReturnDetails">
    UPDATE return_detail
       SET rdetail_status = '반려',
           return_why = #{reason}
     WHERE rdetail_id IN
     <foreach collection="ids" item="id" open="(" separator="," close=")">
       #{id}
     </foreach>
  </update>


  
  <update id="updateReturnStatus">
   
  UPDATE RETURN r
     SET RETURN_STATUS = (SELECT CASE
                              WHEN SUM(CASE WHEN d.RDETAIL_STATUS = '대기' THEN 1 ELSE 0 END) = COUNT(*)
                                THEN '배송완료'
                              WHEN SUM(CASE WHEN d.RDETAIL_STATUS = '대기' THEN 1 ELSE 0 END) > 0
                                THEN '처리중'
                              ELSE '처리완료'
                            END
                        FROM RETURN_DETAIL d
                      WHERE d.RETURN_ID = r.return_id )
   WHERE RETURN_ID = (SELECT min(RETURN_ID) FROM RETURN_DETAIL WHERE rdetail_id = #{returnId})
  </update>


  <!-- ===================== 출하지시 ===================== -->

  <!-- 출하지시 대상 주문 목록 (SalesOrderVO 기준) -->
  <select id="selectShippingOrders" resultType="com.yedam.scm.vo.SalesOrderVO">
    SELECT so.order_id,
           so.order_date,
           v.company_name,
           so.status
      FROM sales_order so
      LEFT JOIN vendor v ON so.vendor_id = v.vendor_id
     WHERE so.status = '처리완료'
     ORDER BY so.order_date DESC
  </select>

<!-- 다건 주문 출하지시 등록 -->
<insert id="insertShipOrders" parameterType="com.yedam.scm.vo.ShipOrderVO">
  <selectKey keyProperty="shipId" resultType="string" order="BEFORE">
    SELECT next_date_code('OB') FROM dual
  </selectKey>
  
  INSERT INTO ship_order (
    ship_id,
    order_id,
    ship_date,
    ship_status
  ) VALUES (
    #{shipId},
    #{orderId},
    SYSDATE,
    '대기'
  )
</insert>






<!-- ===================== 거래처원장 페이지 ===================== -->
<select id="selectAccountLedgerList"
        parameterType="AccountLedgerSearchDTO"
        resultType="SalesOrderVO">

  SELECT
      v.vendor_id                                           AS vendorId,
      v.company_name                                        AS companyName,
      NVL(prev.total_price, 0)                              AS prevTotalPrice,
      NVL(s.total_price, 0)                                 AS totalPrice,
      NVL(r.return_price, 0)                                AS returnPrice,
      NVL(p.pay_amount, 0)                                  AS totalPayment,
      NVL(s.total_price, 0)
        - NVL(r.return_price, 0)
        - NVL(p.pay_amount, 0)                              AS totalAr,
      MAX_SO.last_order_date                                AS lastOrderDate,
      NVL(o.order_cnt, 0)                                   AS orderCount,
      NVL(u.unpaid_cnt, 0)                                  AS unpaidCount

  FROM vendor v

  <!-- 🔹 이월금액 (조회 시작일 이전 미수금 기준) -->
  LEFT JOIN (
      SELECT vendor_id, SUM(total_price) AS total_price
      FROM sales_order
      WHERE pay_status = '대기'
        AND status IN ('출고완료', '배송완료')
        <if test="startDate != null">
          AND TRUNC(order_date) &lt; TRUNC(#{startDate,jdbcType=DATE})
        </if>
      GROUP BY vendor_id
  ) prev ON v.vendor_id = prev.vendor_id

  <!-- 🔹 기간 내 매출 -->
  LEFT JOIN (
      SELECT vendor_id, SUM(total_price) AS total_price
      FROM sales_order
      WHERE status IN ('출고완료', '배송완료')
        <if test="startDate != null and endDate != null">
          AND TRUNC(order_date)
            BETWEEN TRUNC(#{startDate,jdbcType=DATE})
                AND TRUNC(#{endDate,jdbcType=DATE})
        </if>
      GROUP BY vendor_id
  ) s ON v.vendor_id = s.vendor_id

  <!-- 🔹 기간 내 반품 -->
  LEFT JOIN (
      SELECT r.vendor_id, SUM(rd.return_qty * rd.prod_unit_price) AS return_price
      FROM return r
      JOIN return_detail rd ON r.return_id = rd.return_id
      WHERE rd.rdetail_status = '승인'
        <if test="startDate != null and endDate != null">
          AND TRUNC(r.return_date)
            BETWEEN TRUNC(#{startDate,jdbcType=DATE})
                AND TRUNC(#{endDate,jdbcType=DATE})
        </if>
      GROUP BY r.vendor_id
  ) r ON v.vendor_id = r.vendor_id

  <!-- 🔹 기간 내 결제 -->
  LEFT JOIN (
      SELECT vendor_id, SUM(pay_amount) AS pay_amount
      FROM payment
      WHERE 1=1
        <if test="startDate != null and endDate != null">
          AND TRUNC(pay_date)
            BETWEEN TRUNC(#{startDate,jdbcType=DATE})
                AND TRUNC(#{endDate,jdbcType=DATE})
        </if>
      GROUP BY vendor_id
  ) p ON v.vendor_id = p.vendor_id

  <!-- 🔹 최근 거래일 -->
  LEFT JOIN (
      SELECT vendor_id, MAX(order_date) AS last_order_date
      FROM sales_order
      WHERE status IN ('출고완료', '배송완료')
      GROUP BY vendor_id
  ) MAX_SO ON v.vendor_id = MAX_SO.vendor_id

  <!-- 🔹 기간 내 주문건수 -->
  LEFT JOIN (
      SELECT vendor_id, COUNT(*) AS order_cnt
      FROM sales_order
      WHERE status IN ('출고완료', '배송완료')
        <if test="startDate != null and endDate != null">
          AND TRUNC(order_date)
            BETWEEN TRUNC(#{startDate,jdbcType=DATE})
                AND TRUNC(#{endDate,jdbcType=DATE})
        </if>
      GROUP BY vendor_id
  ) o ON v.vendor_id = o.vendor_id

  <!-- 🔹 미수건수 (누적 기준) -->
  LEFT JOIN (
      SELECT vendor_id, COUNT(*) AS unpaid_cnt
      FROM sales_order
      WHERE status IN ('출고완료', '배송완료')
        AND pay_status = '대기'
      GROUP BY vendor_id
  ) u ON v.vendor_id = u.vendor_id

  WHERE v.type IN (0, 2)
   <!-- ✅ 🔽🔽🔽 여기에 추가 -->
  <if test="vendorId != null and vendorId != ''">
    AND v.vendor_id = #{vendorId}
  </if>
  <!-- ✅ 🔼🔼🔼 이 위치임 -->


  <!-- ✅ 핵심: 실제 출력 범위를 “최근거래일자 기준”으로 필터링 -->
  <if test="startDate != null and endDate != null">
    AND TRUNC(MAX_SO.last_order_date)
        BETWEEN TRUNC(#{startDate,jdbcType=DATE})
            AND TRUNC(#{endDate,jdbcType=DATE})
  </if>

  ORDER BY v.company_name
</select>






  <!-- ===================== 거래처원장 대시보드  ===================== -->


<!-- 거래처별 상세 리스트 -->
<select id="selectDashboardList" resultType="SalesOrderVO">
  SELECT v.vendor_id AS vendorId, v.company_name AS companyName,
         NVL(SUM(s.total_price),0) AS totalPrice,
         NVL(SUM(p.pay_amount),0) AS totalPayment,
         (NVL(SUM(s.total_price),0) - NVL(SUM(p.pay_amount),0)) AS totalAr
  FROM vendor v
  LEFT JOIN sales_order s ON v.vendor_id = s.vendor_id
  LEFT JOIN payment p ON v.vendor_id = p.vendor_id
  GROUP BY v.vendor_id, v.company_name
</select>


 <!-- ✅ 판매처(원장페이지 전용) 모달 목록 -->
<select id="selectVendorListByCondition" resultType="com.yedam.scm.vo.VendorVO">
  SELECT *
    FROM (
      SELECT v.vendor_id AS vendorId,
             v.company_name AS companyName,
             ROW_NUMBER() OVER (ORDER BY v.vendor_id DESC) AS rn
        FROM vendor v
       WHERE 1=1
         <if test="condition != null and condition != ''">
           AND (v.vendor_id LIKE '%' || #{condition} || '%'
            OR v.company_name LIKE '%' || #{condition} || '%')
         </if>
    )
   WHERE rn BETWEEN #{paging.startRow} AND #{paging.endRow}
</select>

<!-- ✅ 총 개수 -->
<select id="selectVendorCountByCondition" resultType="long">
  SELECT COUNT(*)
    FROM vendor v
   WHERE 1=1
     <if test="condition != null and condition != ''">
       AND (v.vendor_id LIKE '%' || #{condition} || '%'
        OR v.company_name LIKE '%' || #{condition} || '%')
     </if>
</select>





 <!-- ===================== 주문승인 페이지 모달  ===================== -->
<!-- ✅ 판매처 모달 -->

<select id="selectApprovalVendorModal" resultType="com.yedam.scm.vo.VendorVO">
  SELECT *
    FROM (
      SELECT
          v.vendor_id AS vendorId,
          v.company_name AS companyName,
          ROW_NUMBER() OVER (ORDER BY v.company_name) AS rn
        FROM vendor v
       WHERE v.type IN (0, 2)
         <if test="condition != null and condition != ''">
           AND (v.company_name LIKE '%' || #{condition} || '%'
            OR v.vendor_id LIKE '%' || #{condition} || '%')
         </if>
    )
   WHERE rn BETWEEN #{paging.startRow} AND #{paging.endRow}
</select>

<select id="countApprovalVendorModal" resultType="long">
  SELECT COUNT(*)
    FROM vendor v
   WHERE v.type IN (0, 2)
     <if test="condition != null and condition != ''">
       AND (v.company_name LIKE '%' || #{condition} || '%'
        OR v.vendor_id LIKE '%' || #{condition} || '%')
     </if>
</select>


<!-- ✅ 주문번호 모달 -->
<select id="selectApprovalOrderModal" resultType="com.yedam.scm.vo.SalesOrderVO">
  SELECT *
    FROM (
      SELECT
          s.order_id AS orderId,
          s.order_date AS orderDate,
          v.company_name AS companyName,
          ROW_NUMBER() OVER (ORDER BY s.order_date DESC) AS rn
        FROM sales_order s
        JOIN vendor v ON s.vendor_id = v.vendor_id
       WHERE s.status IN ('대기', '처리중')
         <if test="condition != null and condition != ''">
           AND (s.order_id LIKE '%' || #{condition} || '%'
            OR v.company_name LIKE '%' || #{condition} || '%')
         </if>
    )
   WHERE rn BETWEEN #{paging.startRow} AND #{paging.endRow}
</select>

<select id="countApprovalOrderModal" resultType="long">
  SELECT COUNT(*)
    FROM sales_order s
    JOIN vendor v ON s.vendor_id = v.vendor_id
   WHERE s.status IN ('대기', '처리중')
     <if test="condition != null and condition != ''">
       AND (s.order_id LIKE '%' || #{condition} || '%'
        OR v.company_name LIKE '%' || #{condition} || '%')
     </if>
</select>




</mapper>