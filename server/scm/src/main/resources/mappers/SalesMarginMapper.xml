<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.yedam.scm.order.mapper.SalesMarginMapper">

  <sql id="Cols">
    SALE_PROD_ID, SALE_PROD_NAME, SALE_PROD_PRICE,
    PROD_UNIT_PRICE, SALE_MARGIN, SORT_NO, POS_SHOW_YN,
    CREATE_DT, UPDATE_DT
  </sql>

    <!-- POS설정 - 기존데이터 삭제 -->
    <delete id="deleteAll">
        DELETE FROM SALES_MARGIN
    </delete>

    <!-- POS설정 - 새 데이터 삽입 -->
    <insert id="insert" parameterType="SalesMarginVO">
        INSERT INTO SALES_MARGIN (
            SALE_PROD_ID,
            SALE_PROD_NAME,
            PROD_UNIT_PRICE,
            SALE_MARGIN,
            POS_SHOW_YN,
            SORT_NO,
            SALE_PROD_PRICE
        ) VALUES (
            #{saleProdId},
            #{saleProdName},
            #{prodUnitPrice},
            #{saleMargin},
            #{posShowYn},
            #{sortNo},
            #{saleProdPrice}
        )
    </insert>


  <!-- 목록 (POS 순서대로) -->
  <select id="selectSalesMarginList" resultType="SalesMarginVO">
    SELECT <include refid="Cols"/>
      FROM SALES_MARGIN
     ORDER BY SORT_NO
  </select>

  <!-- 단건 조회 -->
  <select id="selectSalesMarginById" parameterType="string" resultType="SalesMarginVO">
    SELECT <include refid="Cols"/>
      FROM SALES_MARGIN
     WHERE SALE_PROD_ID = #{saleProdId}
  </select>

  

  <!-- 삭제 -->
  <delete id="deleteSalesMargin" parameterType="string">
    DELETE FROM SALES_MARGIN WHERE SALE_PROD_ID = #{saleProdId}
  </delete>





<!-- ✅ POS 결제 등록 -->

<!-- 판매 마스터 등록 -->
<insert id="insertSaleMaster" parameterType="SalesMasterVO">
  <selectKey keyProperty="saleId" resultType="string" order="BEFORE">
    SELECT 'SI' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
           LPAD(NVL(MAX(SUBSTR(sale_id, 12, 3)), 0) + 1, 3, '0')
    FROM sales_master
    WHERE sale_id LIKE 'SI' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
  </selectKey>

  INSERT INTO sales_master (sale_id, sale_total_amount, sale_date, sale_pay_type, vendor_id)
  VALUES (#{saleId}, #{saleTotalAmount}, SYSDATE, #{salePayType}, #{vendorId})
</insert>


<!-- 판매 상세 등록 -->
<insert id="insertSaleDetail" parameterType="com.yedam.scm.vo.SalesDetailVO">

  <!-- 🧩 1. 판매 상세 ID 자동 생성 -->
  <selectKey keyProperty="sdetailId" resultType="string" order="BEFORE">
    SELECT 'SDI' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
           LPAD(NVL(MAX(SUBSTR(sdetail_id, 13, 3)), 0) + 1, 3, '0')
    FROM sales_detail
    WHERE sdetail_id LIKE 'SDI' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
  </selectKey>

  <!-- 🧾 2. 상세 데이터 INSERT -->
  INSERT INTO SALES_DETAIL (
      SDETAIL_ID,      
      SALE_ID,         
      SALE_PROD_ID,     
      SALE_PROD_NAME,    
      PROD_UNIT_PRICE,     
      SALE_PROD_PRICE,    
      SALE_MARGIN,      
      SALE_QTY,          
      SALE_TOTAL_PRICE  
  )
  SELECT
      #{sdetailId},           
      #{saleId},                 
      P.SALE_PROD_ID,
      P.SALE_PROD_NAME,
      P.PROD_UNIT_PRICE,         
      P.SALE_PROD_PRICE,          
      P.SALE_MARGIN,
      #{saleQty},
      (P.SALE_PROD_PRICE * #{saleQty})
  FROM SALES_MARGIN P
  WHERE P.SALE_PROD_ID = #{saleProdId}

</insert>




<!-- 매출 이력 조회 -->
<select id="getSalesHistory" parameterType="string" resultType="SalesMasterVO">
  SELECT
    sale_id       AS saleId,
    sale_total_amount AS saleTotalAmount,
    TO_CHAR(sale_date, 'YYYY-MM-DD HH24:MI') AS saleDate,
    sale_pay_type AS salePayType,
    vendor_id     AS vendorId
  FROM sales_master
  <where>
    <if test="vendorId != null and vendorId != ''">
      vendor_id = #{vendorId}
    </if>
  </where>
  ORDER BY sale_date DESC
</select>

<!-- 매출 요약 (오늘 vs 어제) -->
<select id="getDailySales" resultType="map">
    SELECT 
        NVL(SUM(sale_total_amount), 0) AS TOTAL_SALES,
        COUNT(*) AS ORDER_COUNT
    FROM sales_master
    WHERE vendor_id = #{vendorId}
      AND TRUNC(sale_date) = TRUNC(SYSDATE - #{dayOffset})
</select>


<!-- 이번 달 매출 합계 요약 -->
<!-- ✅ 월 총 매출 -->
  <select id="getMonthlyTotal" resultType="int">
    SELECT NVL(SUM(sale_total_amount), 0)
    FROM sales_master
    WHERE vendor_id = #{vendorId}
      AND TO_CHAR(sale_date, 'YYYY') = #{year}
      AND TO_CHAR(sale_date, 'MM') = LPAD(#{month}, 2, '0')
  </select>

<!-- ✅ 일자별 매출 (월별 탭용) -->
<select id="getMonthlyDailySales" resultType="hashmap">
  SELECT
    TO_CHAR(sale_date, 'YYYY-MM-DD') AS sale_date_str,
    NVL(SUM(sale_total_amount), 0) AS amount
  FROM sales_master
  WHERE vendor_id = #{vendorId}
    AND TO_CHAR(sale_date, 'YYYY') = #{year}
    AND TO_CHAR(sale_date, 'MM') = LPAD(#{month}, 2, '0')
  GROUP BY TO_CHAR(sale_date, 'YYYY-MM-DD')
  ORDER BY sale_date_str
</select>


  <!-- ✅ 영업일 수 (매출이 발생한 날짜 수) -->
  <select id="getWorkingDays" resultType="int">
    SELECT COUNT(DISTINCT TO_CHAR(sale_date, 'YYYY-MM-DD'))
    FROM sales_master
    WHERE vendor_id = #{vendorId}
      AND TO_CHAR(sale_date, 'YYYY') = #{year}
      AND TO_CHAR(sale_date, 'MM') = LPAD(#{month}, 2, '0')
  </select>






  
<!-- ✅ 최근 7일: 본사 주문금액 vs 실제 매출금액 (두 라인) -->
<select id="getSalesTrendDaily" resultType="hashmap">
  SELECT 
      d.LABEL,
      NVL(s.SALES_AMT, 0)  AS SALES_AMT,  
      NVL(o.ORDER_AMT, 0)  AS ORDER_AMT  
  FROM (
     
      SELECT TO_CHAR(TRUNC(sale_date), 'YYYY-MM-DD') AS LABEL
        FROM sales_master
       WHERE TRUNC(sale_date) <![CDATA[>=]]> TRUNC(SYSDATE - 6)
       GROUP BY TRUNC(sale_date)
      UNION
      SELECT TO_CHAR(TRUNC(order_date), 'YYYY-MM-DD') AS LABEL
        FROM sales_order
       WHERE TRUNC(order_date) <![CDATA[>=]]> TRUNC(SYSDATE - 6)
       GROUP BY TRUNC(order_date)
  ) d
  LEFT JOIN (
      SELECT TO_CHAR(TRUNC(sale_date), 'YYYY-MM-DD') AS LABEL,
             SUM(sale_total_amount) AS SALES_AMT
        FROM sales_master
       WHERE vendor_id = #{vendorId}
         AND TRUNC(sale_date) <![CDATA[>=]]> TRUNC(SYSDATE - 6)
       GROUP BY TRUNC(sale_date)
  ) s ON s.LABEL = d.LABEL
  LEFT JOIN (
      SELECT TO_CHAR(TRUNC(order_date), 'YYYY-MM-DD') AS LABEL,
             SUM(total_price) AS ORDER_AMT
        FROM sales_order
       WHERE vendor_id = #{vendorId}
         AND TRUNC(order_date) <![CDATA[>=]]> TRUNC(SYSDATE - 6)
       GROUP BY TRUNC(order_date)
  ) o ON o.LABEL = d.LABEL
  ORDER BY d.LABEL
</select>

<!-- ✅ 최근 6개월: 본사 주문금액 vs 실제 매출금액 (두 라인) -->
<select id="getSalesTrendMonthly" resultType="hashmap">
  SELECT 
      d.LABEL,
      NVL(s.SALES_AMT, 0)  AS SALES_AMT,  
      NVL(o.ORDER_AMT, 0)  AS ORDER_AMT   
  FROM (
     
      SELECT TO_CHAR(TRUNC(sale_date, 'MM'), 'YYYY-MM') AS LABEL
        FROM sales_master
       WHERE TRUNC(sale_date, 'MM') <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
       GROUP BY TRUNC(sale_date, 'MM')
      UNION
      SELECT TO_CHAR(TRUNC(order_date, 'MM'), 'YYYY-MM') AS LABEL
        FROM sales_order
       WHERE TRUNC(order_date, 'MM') <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
       GROUP BY TRUNC(order_date, 'MM')
  ) d
  LEFT JOIN (
      SELECT TO_CHAR(TRUNC(sale_date, 'MM'), 'YYYY-MM') AS LABEL,
             SUM(sale_total_amount) AS SALES_AMT
        FROM sales_master
       WHERE vendor_id = #{vendorId}
         AND TRUNC(sale_date, 'MM') <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
       GROUP BY TRUNC(sale_date, 'MM')
  ) s ON s.LABEL = d.LABEL
  LEFT JOIN (
      SELECT TO_CHAR(TRUNC(order_date, 'MM'), 'YYYY-MM') AS LABEL,
             SUM(total_price) AS ORDER_AMT
        FROM sales_order
       WHERE vendor_id = #{vendorId}
         AND TRUNC(order_date, 'MM') <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
       GROUP BY TRUNC(order_date, 'MM')
  ) o ON o.LABEL = d.LABEL
  ORDER BY d.LABEL
</select>

<!-- ✅ 작년 vs 올해 월별 매출 비교 -->
<select id="getSalesCompare" resultType="hashmap">
  SELECT 
    TO_CHAR(TRUNC(sale_date, 'MM'), 'MM') AS LABEL,
    SUM(CASE WHEN TO_CHAR(sale_date, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY') 
             THEN sale_total_amount ELSE 0 END) AS THIS_YEAR,
    SUM(CASE WHEN TO_CHAR(sale_date, 'YYYY') = TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'YYYY')
             THEN sale_total_amount ELSE 0 END) AS LAST_YEAR
  FROM sales_master
 WHERE vendor_id = #{vendorId}
  AND sale_date <![CDATA[>=]]> ADD_MONTHS(SYSDATE, -24)

  GROUP BY TO_CHAR(TRUNC(sale_date, 'MM'), 'MM')
  ORDER BY LABEL
</select>

<!-- ✅ 원두 판매 랭킹 (최근 3개월 / 자동 비율 계산 TOP 5 ) -->
<select id="getCoffeeRank" resultType="hashmap">
  SELECT * FROM (
    SELECT 
      sd.sale_prod_name AS LABEL,
      ROUND(
        (SUM(sd.sale_total_price) /
         (SELECT SUM(sd2.sale_total_price)
            FROM sales_detail sd2
            JOIN sales_master sm2 ON sd2.sale_id = sm2.sale_id
           WHERE sm2.vendor_id = #{vendorId}
             AND sm2.sale_date <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE), -3)
         ) * 100
        ), 1
      ) AS RATE
    FROM sales_detail sd
    JOIN sales_master sm ON sd.sale_id = sm.sale_id
    WHERE sm.vendor_id = #{vendorId}
      AND sm.sale_date <![CDATA[>=]]> ADD_MONTHS(TRUNC(SYSDATE), -3)
    GROUP BY sd.sale_prod_name
    ORDER BY RATE DESC
  ) 
  WHERE ROWNUM <![CDATA[<=]]> 5
</select>

<!-- 매출성장률 -->
<select id="selectSalesGrowth" resultType="hashmap">
  SELECT
      NVL(SUM(CASE WHEN TRUNC(SALE_DATE) = TRUNC(SYSDATE) THEN SALE_TOTAL_AMOUNT END), 0) AS TODAY,
      NVL(SUM(CASE WHEN TRUNC(SALE_DATE) = TRUNC(SYSDATE - 1) THEN SALE_TOTAL_AMOUNT END), 0) AS YESTERDAY,
      NVL(SUM(CASE WHEN TO_CHAR(SALE_DATE, 'YYYYMM') = TO_CHAR(SYSDATE, 'YYYYMM') THEN SALE_TOTAL_AMOUNT END), 0) AS CURR_MONTH,
      NVL(SUM(CASE WHEN TO_CHAR(SALE_DATE, 'YYYYMM') = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') THEN SALE_TOTAL_AMOUNT END), 0) AS PREV_MONTH,
      NVL(SUM(CASE WHEN TO_CHAR(SALE_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY') THEN SALE_TOTAL_AMOUNT END), 0) AS THIS_YEAR,
      NVL(SUM(CASE WHEN TO_CHAR(SALE_DATE, 'YYYY') = TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'YYYY') THEN SALE_TOTAL_AMOUNT END), 0) AS LAST_YEAR
  FROM SALES_MASTER
  WHERE VENDOR_ID = #{vendorId}
</select>


</mapper>
