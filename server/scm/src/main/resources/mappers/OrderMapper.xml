<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.scm.order.mapper.OrderMapper">

    <!-- ============================= -->
    <!-- 1. 주문 등록 -->
    <!-- ============================= -->
    <insert id="insertOrder" parameterType="SalesOrderVO">
        <selectKey keyProperty="orderId" resultType="string" order="BEFORE">
            SELECT next_date_code('SO') FROM dual
        </selectKey>

        INSERT INTO SALES_ORDER (
            order_id,
            order_date,
            total_price,
            vendor_id,
            status,
            delivery_date,
            pay_status,
            paydue_date
           
        ) VALUES (
            #{orderId},
            SYSDATE,
            NVL(#{totalPrice}, 0),
            #{vendorId},
            NVL(#{status}, 'ORDER'),
            #{deliveryDate},
            NVL(#{payStatus}, 'UNPAID'),
            #{paydueDate}
           
        )
    </insert>

    <!-- ============================= -->
    <!-- 2. 주문 상세 등록 -->
    <!-- ============================= -->
    <insert id="insertOrderDetail" parameterType="SalesOrderDetailVO">
    <selectKey keyProperty="odetailId" resultType="string" order="BEFORE">
        SELECT next_date_code('SOD') FROM dual
    </selectKey>

    INSERT INTO SALES_ORDER_DETAIL (
        odetail_id,
        order_id,
        prod_id,
        prod_name,
        spec,
        unit,
        order_qty,
        prod_price,
        prod_status
    ) VALUES (
        #{odetailId},
        #{orderId},
        #{prodId},
        #{prodName},
        #{spec},
        #{unit},
        #{orderQty},
        #{prodPrice},
        #{prodStatus}
    )
    </insert>


    <!-- ============================= -->
    <!-- 3. 주문 목록 조회 -->
    <!-- ============================= -->
    <select id="getOrderListForView" parameterType="map" resultType="SalesOrderVO">
        SELECT 
            so.order_id,
            so.order_date,
            so.total_price,
            so.delivery_date,
            so.status,
            (
                SELECT CASE 
                        WHEN COUNT(*) = 1 THEN MIN(sod2.prod_name)
                        ELSE MIN(sod2.prod_name) || ' 외 ' || (COUNT(*) - 1) || '건'
                       END
                FROM sales_order_detail sod2
                WHERE sod2.order_id = so.order_id
            ) AS prod_name
        FROM sales_order so
        WHERE 1=1

        <if test="startDate != null and startDate != ''">
            AND so.order_date &gt;= TO_DATE(#{startDate}, 'YYYY-MM-DD')
        </if>
        <if test="endDate != null and endDate != ''">
            AND so.order_date &lt; TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1
        </if>
        <if test="status != null and status != ''">
            AND so.status = #{status}
        </if>
        <if test="orderId != null and orderId != ''">
            AND so.order_id LIKE '%' || #{orderId} || '%'
        </if>
        <if test="prodName != null and prodName != ''">
            AND EXISTS (
                SELECT 1
                FROM sales_order_detail sod2
                WHERE sod2.order_id = so.order_id
                  AND sod2.prod_name LIKE '%' || #{prodName} || '%'
            )
        </if>

        ORDER BY so.order_date DESC
    </select>

    <!-- ============================= -->
    <!-- 4. 주문 상세 조회 -->
    <!-- ============================= -->
    <select id="getOrderDetailList" parameterType="java.lang.String" resultType="SalesOrderDetailVO">
        SELECT
            sod.odetail_id,
            sod.order_id,
            sod.prod_id,
            sod.prod_name,
            sod.spec,
            sod.unit,
            sod.order_qty,
            sod.prod_price,
            sod.prod_status
        FROM SALES_ORDER_DETAIL sod
        WHERE sod.order_id = #{orderId}
        ORDER BY sod.odetail_id
    </select>

    <!-- ============================= -->
    <!-- 8. 제품 총 개수 조회 -->
    <!-- ============================= -->
    <select id="getProductCount" resultType="int">
        SELECT COUNT(*) 
        FROM PRODUCT
    </select>

    <!-- ============================= -->
    <!-- 9. 제품 목록 조회 (Oracle 11g 호환) -->
    <!-- ============================= -->
    <select id="getProductList" parameterType="map" resultType="ProductVO">
    SELECT *
    FROM (
        SELECT 
            p.PROD_ID,
            p.PROD_NAME,
            p.SPEC,
            p.UNIT,
            NULL AS PROD_PRICE, 
            ROWNUM rn
        FROM (
            SELECT 
                PROD_ID,
                PROD_NAME,
                SPEC,
                UNIT
            FROM PRODUCT
            <where>
                <if test="prodName != null and prodName != ''">
                    AND PROD_NAME LIKE '%' || #{prodName} || '%'
                </if>
                <if test="status != null and status != ''">
                    AND STATUS = #{status}
                </if>
            </where>
            ORDER BY PROD_ID
        ) p
        WHERE ROWNUM &lt;= #{offset} + #{pageSize}
    )
    WHERE rn &gt; #{offset}
    </select>

    <!-- ============================= -->
    <!-- 반품 목록 조회 (Oracle 11g 호환) -->
    <!-- ============================= -->
    <insert id="insertReturn" parameterType="ReturnVO">
    INSERT INTO RETURN (
        return_id,
        odetail_id,
        return_qty,
        return_why,
        return_price,
        return_date,
        return_status
    ) VALUES (
        #{returnId},
        #{odetailId},
        NVL(#{returnQty}, 0),
        #{returnWhy},
        NVL(#{returnPrice}, 1),        <!-- 가격이 없으면 1원으로 -->
        SYSDATE,
        NVL(#{returnStatus}, '대기')  <!-- 상태가 없으면 '대기' -->
    )
    </insert>


</mapper>
